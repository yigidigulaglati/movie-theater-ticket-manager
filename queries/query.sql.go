// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package queries

import (
	"context"
	"database/sql"
)

const deleteMovieWithID = `-- name: DeleteMovieWithID :execrows
delete from movie where id = ?
`

func (q *Queries) DeleteMovieWithID(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteMovieWithID, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteRoomWithID = `-- name: DeleteRoomWithID :execrows
delete from room where id = ?
`

func (q *Queries) DeleteRoomWithID(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteRoomWithID, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteStaleMovieSchedules = `-- name: DeleteStaleMovieSchedules :execrows
delete from room_movie where start_date_unix < ?
`

func (q *Queries) DeleteStaleMovieSchedules(ctx context.Context, startDateUnix int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteStaleMovieSchedules, startDateUnix)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const insertNewMovie = `-- name: InsertNewMovie :execrows
insert into movie(title, director, release_year, genre, rating, description, duration)
values (?,?,?,?,?,?,?)
`

type InsertNewMovieParams struct {
	Title       string
	Director    sql.NullString
	ReleaseYear sql.NullInt64
	Genre       sql.NullString
	Rating      sql.NullFloat64
	Description sql.NullString
	Duration    sql.NullString
}

func (q *Queries) InsertNewMovie(ctx context.Context, arg InsertNewMovieParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertNewMovie,
		arg.Title,
		arg.Director,
		arg.ReleaseYear,
		arg.Genre,
		arg.Rating,
		arg.Description,
		arg.Duration,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const insertNewRoom = `-- name: InsertNewRoom :execrows
insert into room(room_name, seat_price)
values (?, ?)
`

type InsertNewRoomParams struct {
	RoomName  string
	SeatPrice int64
}

func (q *Queries) InsertNewRoom(ctx context.Context, arg InsertNewRoomParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertNewRoom, arg.RoomName, arg.SeatPrice)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const insertUser = `-- name: InsertUser :execrows
insert into user(username, password) 
values (?, ?)
`

type InsertUserParams struct {
	Username string
	Password string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertUser, arg.Username, arg.Password)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const selectAllSeatingOfRoomWithID = `-- name: SelectAllSeatingOfRoomWithID :many
select id, room_id, row_index, col_index, seat from seating
where id = ?
`

func (q *Queries) SelectAllSeatingOfRoomWithID(ctx context.Context, id int64) ([]Seating, error) {
	rows, err := q.db.QueryContext(ctx, selectAllSeatingOfRoomWithID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Seating
	for rows.Next() {
		var i Seating
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.RowIndex,
			&i.ColIndex,
			&i.Seat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectMovieAllColumnsWithID = `-- name: SelectMovieAllColumnsWithID :one
select id, title, director, release_year, genre, rating, description, duration 
from movie 
where id = ?
limit 1
`

func (q *Queries) SelectMovieAllColumnsWithID(ctx context.Context, id int64) (Movie, error) {
	row := q.db.QueryRowContext(ctx, selectMovieAllColumnsWithID, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Director,
		&i.ReleaseYear,
		&i.Genre,
		&i.Rating,
		&i.Description,
		&i.Duration,
	)
	return i, err
}

const selectMovieWithID = `-- name: SelectMovieWithID :one
select id from movie
where id = ? limit 1
`

func (q *Queries) SelectMovieWithID(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, selectMovieWithID, id)
	err := row.Scan(&id)
	return id, err
}

const selectRoomOfMovieJoinRoomJoinSeating = `-- name: SelectRoomOfMovieJoinRoomJoinSeating :many
select room_movie.id, room_movie_seating.id as room_movie_seating_id, room_movie.room_id, room_movie.movie_id, room_movie.start_date_unix, room.room_name, room.seat_price, room_movie_seating.seat, room_movie_seating.row_index, room_movie_seating.col_index from room_movie inner join room on room_movie.room_id = room.id inner join room_movie_seating on room_movie.id = room_movie_seating.room_movie_id where room_movie.id = ?
`

type SelectRoomOfMovieJoinRoomJoinSeatingRow struct {
	ID                 int64
	RoomMovieSeatingID int64
	RoomID             int64
	MovieID            int64
	StartDateUnix      int64
	RoomName           string
	SeatPrice          int64
	Seat               int64
	RowIndex           int64
	ColIndex           int64
}

func (q *Queries) SelectRoomOfMovieJoinRoomJoinSeating(ctx context.Context, id int64) ([]SelectRoomOfMovieJoinRoomJoinSeatingRow, error) {
	rows, err := q.db.QueryContext(ctx, selectRoomOfMovieJoinRoomJoinSeating, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectRoomOfMovieJoinRoomJoinSeatingRow
	for rows.Next() {
		var i SelectRoomOfMovieJoinRoomJoinSeatingRow
		if err := rows.Scan(
			&i.ID,
			&i.RoomMovieSeatingID,
			&i.RoomID,
			&i.MovieID,
			&i.StartDateUnix,
			&i.RoomName,
			&i.SeatPrice,
			&i.Seat,
			&i.RowIndex,
			&i.ColIndex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectRoomsOfMovieJoinRoomJoinSeating = `-- name: SelectRoomsOfMovieJoinRoomJoinSeating :many
select room_movie.id, room_movie.room_id, room_movie.movie_id, room_movie.start_date_unix, room.room_name, room.seat_price, room_movie_seating.seat from room_movie inner join room on room_movie.room_id = room.id inner join room_movie_seating on room_movie.id = room_movie_seating.room_movie_id where room_movie.movie_id = ? and room_movie.start_date_unix > ? order by room_movie.room_id desc, room_movie.start_date_unix desc
`

type SelectRoomsOfMovieJoinRoomJoinSeatingParams struct {
	MovieID       int64
	StartDateUnix int64
}

type SelectRoomsOfMovieJoinRoomJoinSeatingRow struct {
	ID            int64
	RoomID        int64
	MovieID       int64
	StartDateUnix int64
	RoomName      string
	SeatPrice     int64
	Seat          int64
}

func (q *Queries) SelectRoomsOfMovieJoinRoomJoinSeating(ctx context.Context, arg SelectRoomsOfMovieJoinRoomJoinSeatingParams) ([]SelectRoomsOfMovieJoinRoomJoinSeatingRow, error) {
	rows, err := q.db.QueryContext(ctx, selectRoomsOfMovieJoinRoomJoinSeating, arg.MovieID, arg.StartDateUnix)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectRoomsOfMovieJoinRoomJoinSeatingRow
	for rows.Next() {
		var i SelectRoomsOfMovieJoinRoomJoinSeatingRow
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.MovieID,
			&i.StartDateUnix,
			&i.RoomName,
			&i.SeatPrice,
			&i.Seat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectSeatInRoomMovieSeating = `-- name: SelectSeatInRoomMovieSeating :one
select room_movie.id as room_movie_id, room_movie.room_id as room_id, room_movie.movie_id as movie_id, room_movie.start_date_unix as start_date_unix, room_movie_seating.id as room_movie_seating_id, room_movie_seating.row_index as row_index, room_movie_seating.col_index as col_index, room_movie_seating.seat as seat from room_movie_seating join room_movie on room_movie_seating.room_movie_id = room_movie.id where room_movie_seating.room_movie_id = ? and room_movie_seating.row_index = ? and room_movie_seating.col_index = ?
`

type SelectSeatInRoomMovieSeatingParams struct {
	RoomMovieID int64
	RowIndex    int64
	ColIndex    int64
}

type SelectSeatInRoomMovieSeatingRow struct {
	RoomMovieID        int64
	RoomID             int64
	MovieID            int64
	StartDateUnix      int64
	RoomMovieSeatingID int64
	RowIndex           int64
	ColIndex           int64
	Seat               int64
}

func (q *Queries) SelectSeatInRoomMovieSeating(ctx context.Context, arg SelectSeatInRoomMovieSeatingParams) (SelectSeatInRoomMovieSeatingRow, error) {
	row := q.db.QueryRowContext(ctx, selectSeatInRoomMovieSeating, arg.RoomMovieID, arg.RowIndex, arg.ColIndex)
	var i SelectSeatInRoomMovieSeatingRow
	err := row.Scan(
		&i.RoomMovieID,
		&i.RoomID,
		&i.MovieID,
		&i.StartDateUnix,
		&i.RoomMovieSeatingID,
		&i.RowIndex,
		&i.ColIndex,
		&i.Seat,
	)
	return i, err
}

const selectUserWithUsername = `-- name: SelectUserWithUsername :one
select id, username, password from user
where username = ?
`

func (q *Queries) SelectUserWithUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, selectUserWithUsername, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const selectUsernamePassword = `-- name: SelectUsernamePassword :one
select id, username, password from user
where id = ? limit 1
`

func (q *Queries) SelectUsernamePassword(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, selectUsernamePassword, id)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const updateMovieWithID = `-- name: UpdateMovieWithID :execrows
update movie
set title = ?, director = ?, release_year = ?, genre = ?, rating = ?, description = ?, duration = ?
where id = ?
`

type UpdateMovieWithIDParams struct {
	Title       string
	Director    sql.NullString
	ReleaseYear sql.NullInt64
	Genre       sql.NullString
	Rating      sql.NullFloat64
	Description sql.NullString
	Duration    sql.NullString
	ID          int64
}

func (q *Queries) UpdateMovieWithID(ctx context.Context, arg UpdateMovieWithIDParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateMovieWithID,
		arg.Title,
		arg.Director,
		arg.ReleaseYear,
		arg.Genre,
		arg.Rating,
		arg.Description,
		arg.Duration,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateRoomWithID = `-- name: UpdateRoomWithID :execrows
update room
set room_name = ?, seat_price = ?
where id = ?
`

type UpdateRoomWithIDParams struct {
	RoomName  string
	SeatPrice int64
	ID        int64
}

func (q *Queries) UpdateRoomWithID(ctx context.Context, arg UpdateRoomWithIDParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateRoomWithID, arg.RoomName, arg.SeatPrice, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateSeatInRoomMovieSeating = `-- name: UpdateSeatInRoomMovieSeating :execrows
update room_movie_seating set seat = ? where room_movie_id = ? and row_index = ? and col_index = ?
`

type UpdateSeatInRoomMovieSeatingParams struct {
	Seat        int64
	RoomMovieID int64
	RowIndex    int64
	ColIndex    int64
}

func (q *Queries) UpdateSeatInRoomMovieSeating(ctx context.Context, arg UpdateSeatInRoomMovieSeatingParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateSeatInRoomMovieSeating,
		arg.Seat,
		arg.RoomMovieID,
		arg.RowIndex,
		arg.ColIndex,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
